@startuml

title __MAIN's Class Diagram__\n

  namespace  {
    class Board {
        - CountRedPieces : int
        - CountWhitePieces : int
        {static} - board : Piece[][]
        + Board()
        + check_all_possible_moves()
        + check_input_validity()
        + count_pieces()
        {static} + getAllPossibleMoves()
        + make_move()
        + update()
        - display_board()
        - init_board()
    }
  }
  

  namespace  {
    enum Color {
      Empty
      Red
      White
    }
  }
  

  namespace  {
    class Game {
        {static} - game_state : String
        {static} + main()
        {static} - play()
        {static} - update_game_state()
    }
  }
  

  namespace  {
    class Moves {
        {static} - board : Piece[][]
        {static} - checkList : ArrayList<ArrayList<Point>>
        {static} - column : int
        {static} - knock_out_positions : List<Point>
        {static} - modifiedMultipleJump : ArrayList<ArrayList<Point>>
        {static} - player_color : Color
        {static} - row : int
        + Moves()
        + check_move()
        + getAllPossibleMoves()
        {static} + getKnockOutPosition()
        {static} - DiagonalPositions()
        {static} - ModifyMultipleJump()
        {static} - MultipleJump()
        {static} - NotEmptyDiagonal()
        {static} - SimpleMove()
        {static} - SingleJump()
        {static} - UpdateKnockOut()
    }
  }
  

  namespace  {
    interface Observer {
        {abstract} + update()
    }
  }
  

  namespace  {
    class Piece {
        + pos : Point
        - observers : List<Observer>
        + Piece()
        + eliminate_piece()
        + encoded_value()
        + is_empty()
        + is_valid_move()
        + move_piece()
        + notifyObservers()
        + piece_equals()
        + registerObserver()
        + removeObserver()
        - promote_if_necessary()
    }
  }
  

  namespace  {
    enum Rank {
      Empty
      King
      Pawn
    }
  }
  

  namespace  {
    interface Subject {
        {abstract} + notifyObservers()
        {abstract} + registerObserver()
        {abstract} + removeObserver()
    }
  }
  

  namespace  {
    class utils {
        {static} - scanner : Scanner
        {static} + get_current_future_positions()
        {static} + input_move()
        {static} + is_valid_input_format_hint()
        {static} + map_board_values()
        {static} + map_columns()
        {static} + map_rows()
        {static} + reverse_map_columns()
        {static} + reverse_map_rows()
    }
  }
  

  Board .up.|> Observer
  Piece .up.|> Subject
  Piece o-- Color : pCol
  Piece o-- Rank : pRank


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
